# Initialize Sanic app
app = Sanic("bge_embedding_service")

# Initialize bge
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = SentenceTransformer('BAAI/bge-base-zh-v1.5').to(device)


@app.route("/bge_embedding", methods=["POST"])
async def bge_embedding_service(request) -> response.HTTPResponse:
    """
    基于Sanic的bge服务
    """
    try:
        # Get request parameters
        sentences = request.json["sentences"]

        loop = asyncio.get_event_loop()
        embeddings = await asyncio.gather(
            loop.run_in_executor(None, functools.partial(model.encode, normalize_embeddings=True), sentences))

        embeddings_array = np.vstack(embeddings)
        original_shape = json.dumps(embeddings_array.shape)

        binary_data = embeddings_array.tobytes()
        base64_data = base64.b64encode(binary_data).decode()

        return response.json(
            {"embeddings": base64_data, "original_shape": original_shape},
            status=200)
    except Exception as e:
        log_error("基于Sanic的bge服务异常", e)
        return response.json({"Error": traceback.format_exc()}, status=500)


if __name__ == "__main__":
    # Start the app
    app.run(host="0.0.0.0", port=8079)
